-- nxoz compact dashboard (single-file, no dependencies)
-- Tabs: Apps, Jobs, Options
-- Creates an acrylic-like compact GUI with a blur effect and functional tabs.
-- You can host this file and run with: loadstring(game:HttpGet("<your-raw-url>"))()

local Players = game:GetService("Players")
local RunService = game:GetService("RunService")
local Lighting = game:GetService("Lighting")
local UserInputService = game:GetService("UserInputService")

local localPlayer = Players.LocalPlayer
local playerGui = localPlayer:FindFirstChildOfClass("PlayerGui") or Instance.new("PlayerGui", localPlayer)

-- Clean up any previous nxoz GUI
pcall(function() if playerGui:FindFirstChild("nxozGui") then playerGui.nxozGui:Destroy() end end)

-- Blur (acrylic-like) ---------------------------------------------------------
local blur = Instance.new("BlurEffect")
blur.Name = "nxozBlur"
blur.Size = 12
blur.Parent = Lighting

-- Root GUI --------------------------------------------------------------------
local screenGui = Instance.new("ScreenGui")
screenGui.Name = "nxozGui"
screenGui.ResetOnSpawn = false
screenGui.IgnoreGuiInset = true
screenGui.Parent = playerGui

-- Main window (compact) -------------------------------------------------------
local window = Instance.new("Frame")
window.Name = "Window"
window.Size = UDim2.new(0, 520, 0, 340) -- compact
window.Position = UDim2.new(0.5, -260, 0.5, -170)
window.BackgroundColor3 = Color3.fromRGB(20, 20, 22)
window.BackgroundTransparency = 0.25
window.BorderSizePixel = 0
window.Parent = screenGui

-- Drop shadow
local shadow = Instance.new("ImageLabel")
shadow.Name = "Shadow"
shadow.BackgroundTransparency = 1
shadow.Image = "rbxassetid://5028857084"
shadow.ImageTransparency = 0.3
shadow.ScaleType = Enum.ScaleType.Slice
shadow.SliceCenter = Rect.new(24, 24, 276, 276)
shadow.Size = UDim2.new(1, 36, 1, 36)
shadow.Position = UDim2.new(0, -18, 0, -18)
shadow.Parent = window

-- Rounded corners
local corner = Instance.new("UICorner")
corner.CornerRadius = UDim.new(0, 16)
corner.Parent = window

-- subtle gradient for acrylic feel
local grad = Instance.new("UIGradient")
grad.Color = ColorSequence.new{
	ColorSequenceKeypoint.new(0, Color3.fromRGB(255,255,255)),
	ColorSequenceKeypoint.new(1, Color3.fromRGB(200,200,200))
}
grad.Transparency = NumberSequence.new{
	NumberSequenceKeypoint.new(0, 0.6),
	NumberSequenceKeypoint.new(1, 0.8)
}
grad.Rotation = 90
grad.Parent = window

-- Title bar -------------------------------------------------------------------
local titleBar = Instance.new("Frame")
titleBar.Name = "TitleBar"
titleBar.Size = UDim2.new(1, 0, 0, 36)
titleBar.BackgroundColor3 = Color3.fromRGB(18, 18, 20)
titleBar.BackgroundTransparency = 0.15
titleBar.BorderSizePixel = 0
titleBar.Parent = window
Instance.new("UICorner", titleBar).CornerRadius = UDim.new(0, 16)

local title = Instance.new("TextLabel")
title.Name = "Title"
title.Size = UDim2.new(1, -110, 1, 0)
title.Position = UDim2.new(0, 12, 0, 0)
title.BackgroundTransparency = 1
title.Font = Enum.Font.GothamBold
title.Text = "nxoz • dashboard"
title.TextColor3 = Color3.fromRGB(235, 235, 245)
title.TextSize = 16
title.TextXAlignment = Enum.TextXAlignment.Left
title.Parent = titleBar

-- Close button
local closeBtn = Instance.new("TextButton")
closeBtn.Name = "Close"
closeBtn.Size = UDim2.new(0, 26, 0, 26)
closeBtn.Position = UDim2.new(1, -34, 0.5, -13)
closeBtn.BackgroundColor3 = Color3.fromRGB(50, 50, 55)
closeBtn.AutoButtonColor = true
closeBtn.Text = "✕"
closeBtn.TextColor3 = Color3.fromRGB(240, 240, 245)
closeBtn.TextSize = 14
closeBtn.BorderSizePixel = 0
closeBtn.Parent = titleBar
local btnCorner = Instance.new("UICorner", closeBtn); btnCorner.CornerRadius = UDim.new(0, 8)

-- Dragging --------------------------------------------------------------------
do
	local dragging = false
	local dragStart
	local startPos
	titleBar.InputBegan:Connect(function(input)
		if input.UserInputType == Enum.UserInputType.MouseButton1 then
			dragging = true
			dragStart = input.Position
			startPos = window.Position
			input.Changed:Connect(function()
				if input.UserInputState == Enum.UserInputState.End then dragging = false end
			end)
		end
	end)
	UserInputService.InputChanged:Connect(function(input)
		if dragging and input.UserInputType == Enum.UserInputType.MouseMovement then
			local delta = input.Position - dragStart
			window.Position = UDim2.new(startPos.X.Scale, startPos.X.Offset + delta.X,
				startPos.Y.Scale, startPos.Y.Offset + delta.Y)
		end
	end)
end

-- Layout: left tabs, right content -------------------------------------------
local body = Instance.new("Frame")
body.Name = "Body"
body.BackgroundTransparency = 1
body.Position = UDim2.new(0, 0, 0, 36)
body.Size = UDim2.new(1, 0, 1, -36)
body.Parent = window

local tabsPanel = Instance.new("Frame")
tabsPanel.Name = "Tabs"
tabsPanel.BackgroundTransparency = 1
tabsPanel.Position = UDim2.new(0, 0, 0, 0)
tabsPanel.Size = UDim2.new(0, 132, 1, 0)
tabsPanel.Parent = body

local contentPanel = Instance.new("Frame")
contentPanel.Name = "Content"
contentPanel.BackgroundTransparency = 1
contentPanel.Position = UDim2.new(0, 132, 0, 0)
contentPanel.Size = UDim2.new(1, -132, 1, 0)
contentPanel.Parent = body

local tabsList = Instance.new("UIListLayout")
tabsList.FillDirection = Enum.FillDirection.Vertical
tabsList.SortOrder = Enum.SortOrder.LayoutOrder
tabsList.Padding = UDim.new(0, 6)
tabsList.Parent = tabsPanel
tabsList.HorizontalAlignment = Enum.HorizontalAlignment.Center
tabsList.VerticalAlignment = Enum.VerticalAlignment.Top

local function makeTabButton(text, order)
	local btn = Instance.new("TextButton")
	btn.Name = text .. "Tab"
	btn.LayoutOrder = order or 1
	btn.Size = UDim2.new(1, -16, 0, 36)
	btn.Position = UDim2.new(0, 8, 0, 0)
	btn.BackgroundColor3 = Color3.fromRGB(38, 38, 44)
	btn.Text = text
	btn.TextColor3 = Color3.fromRGB(235, 235, 245)
	btn.TextSize = 14
	btn.Font = Enum.Font.Gotham
	btn.AutoButtonColor = true
	btn.BorderSizePixel = 0
	btn.Parent = tabsPanel

	local c = Instance.new("UICorner", btn)
	c.CornerRadius = UDim.new(0, 10)

	local stroke = Instance.new("UIStroke", btn)
	stroke.Thickness = 1
	stroke.Color = Color3.fromRGB(90, 90, 100)
	stroke.Transparency = 0.3

	return btn
end

local function makeSection(titleText, tipText)
	local frame = Instance.new("Frame")
	frame.BackgroundTransparency = 1
	frame.Size = UDim2.new(1, 0, 1, 0)

	local header = Instance.new("TextLabel")
	header.Size = UDim2.new(1, -20, 0, 28)
	header.Position = UDim2.new(0, 12, 0, 12)
	header.BackgroundTransparency = 1
	header.Font = Enum.Font.GothamBold
	header.Text = titleText
	header.TextSize = 16
	header.TextColor3 = Color3.fromRGB(240, 240, 245)
	header.TextXAlignment = Enum.TextXAlignment.Left
	header.Parent = frame

	local tip = Instance.new("TextLabel")
	tip.Size = UDim2.new(1, -24, 0, 22)
	tip.Position = UDim2.new(0, 12, 0, 44)
	tip.BackgroundTransparency = 1
	tip.Font = Enum.Font.Gotham
	tip.Text = tipText
	tip.TextWrapped = true
	tip.TextSize = 13
	tip.TextColor3 = Color3.fromRGB(200, 200, 210)
	tip.TextXAlignment = Enum.TextXAlignment.Left
	tip.Parent = frame

	-- content container
	local inner = Instance.new("Frame")
	inner.Name = "Inner"
	inner.BackgroundColor3 = Color3.fromRGB(30, 30, 34)
	inner.BackgroundTransparency = 0.2
	inner.BorderSizePixel = 0
	inner.Size = UDim2.new(1, -24, 1, -84)
	inner.Position = UDim2.new(0, 12, 0, 72)
	inner.Parent = frame

	Instance.new("UICorner", inner).CornerRadius = UDim.new(0, 12)
	local stroke = Instance.new("UIStroke", inner)
	stroke.Thickness = 1
	stroke.Color = Color3.fromRGB(90, 90, 100)
	stroke.Transparency = 0.4

	return frame, inner
end

-- Create tabs & pages ---------------------------------------------------------
local pages = {}
local currentPage = nil

local function showPage(name)
	for n, page in pairs(pages) do
		page.Visible = (n == name)
	end
	currentPage = name
	title.Text = "nxoz • " .. string.lower(name)
end

local appsBtn = makeTabButton("Apps", 1)
local jobsBtn = makeTabButton("Jobs", 2)
local optionsBtn = makeTabButton("Options", 3)

-- Apps page
do
	local page, inner = makeSection("Apps", "Your scripts and utilities.")
	page.Name = "AppsPage"
	page.Parent = contentPanel
	pages["Apps"] = page

	-- demo buttons
	local list = Instance.new("UIListLayout")
	list.FillDirection = Enum.FillDirection.Vertical
	list.SortOrder = Enum.SortOrder.LayoutOrder
	list.Padding = UDim.new(0, 8)
	list.Parent = inner

	local function addApp(name)
		local btn = Instance.new("TextButton")
		btn.Size = UDim2.new(1, -12, 0, 34)
		btn.Position = UDim2.new(0, 6, 0, 0)
		btn.BackgroundColor3 = Color3.fromRGB(45, 45, 52)
		btn.BorderSizePixel = 0
		btn.AutoButtonColor = true
		btn.Text = "▶  " .. name
		btn.TextColor3 = Color3.fromRGB(235, 235, 245)
		btn.TextSize = 14
		btn.Font = Enum.Font.Gotham
		btn.LayoutOrder = #inner:GetChildren()
		btn.Parent = inner
		Instance.new("UICorner", btn).CornerRadius = UDim.new(0, 10)
		local s = Instance.new("UIStroke", btn); s.Thickness = 1; s.Transparency = 0.4; s.Color = Color3.fromRGB(90, 90, 100)
		btn.MouseButton1Click:Connect(function()
			pcall(function() setclipboard(name) end)
		end)
	end

	addApp("Example Aimbot (placeholder)")
	addApp("Example ESP (placeholder)")
	addApp("Example Teleport (placeholder)")
end

-- Jobs page
do
	local page, inner = makeSection("Jobs", "Toggle background tasks.")
	page.Name = "JobsPage"
	page.Parent = contentPanel
	pages["Jobs"] = page

	local function addToggle(label)
		local holder = Instance.new("Frame")
		holder.Size = UDim2.new(1, -12, 0, 36)
		holder.BackgroundTransparency = 1
		holder.Parent = inner

		local text = Instance.new("TextLabel")
		text.Size = UDim2.new(1, -60, 1, 0)
		text.BackgroundTransparency = 1
		text.TextXAlignment = Enum.TextXAlignment.Left
		text.Position = UDim2.new(0, 0, 0, 0)
		text.Font = Enum.Font.Gotham
		text.Text = label
		text.TextSize = 14
		text.TextColor3 = Color3.fromRGB(230, 230, 240)
		text.Parent = holder

		local toggle = Instance.new("TextButton")
		toggle.Size = UDim2.new(0, 48, 0, 26)
		toggle.Position = UDim2.new(1, -56, 0.5, -13)
		toggle.BackgroundColor3 = Color3.fromRGB(75, 75, 85)
		toggle.Text = "OFF"
		toggle.TextSize = 12
		toggle.Font = Enum.Font.GothamBold
		toggle.TextColor3 = Color3.fromRGB(240, 240, 245)
		toggle.AutoButtonColor = true
		toggle.BorderSizePixel = 0
		toggle.Parent = holder
		Instance.new("UICorner", toggle).CornerRadius = UDim.new(0, 10)

		local state = false
		toggle.MouseButton1Click:Connect(function()
			state = not state
			toggle.Text = state and "ON" or "OFF"
			toggle.BackgroundColor3 = state and Color3.fromRGB(56, 122, 255) or Color3.fromRGB(75, 75, 85)
		end)
	end

	local list = Instance.new("UIListLayout")
	list.FillDirection = Enum.FillDirection.Vertical
	list.SortOrder = Enum.SortOrder.LayoutOrder
	list.Padding = UDim.new(0, 8)
	list.Parent = inner

	addToggle("Flight (placeholder)")
	addToggle("Ghost (placeholder)")
	addToggle("WalkSpeed (placeholder)")
end

-- Options page
do
	local page, inner = makeSection("Options", "Personalize the nxoz UI.")
	page.Name = "OptionsPage"
	page.Parent = contentPanel
	pages["Options"] = page

	local label = Instance.new("TextLabel")
	label.Size = UDim2.new(1, -24, 0, 24)
	label.Position = UDim2.new(0, 12, 0, 8)
	label.BackgroundTransparency = 1
	label.TextXAlignment = Enum.TextXAlignment.Left
	label.Font = Enum.Font.Gotham
	label.Text = "Blur strength"
	label.TextSize = 14
	label.TextColor3 = Color3.fromRGB(230, 230, 240)
	label.Parent = inner

	local sliderTrack = Instance.new("Frame")
	sliderTrack.Position = UDim2.new(0, 12, 0, 36)
	sliderTrack.Size = UDim2.new(1, -24, 0, 6)
	sliderTrack.BackgroundColor3 = Color3.fromRGB(70, 70, 80)
	sliderTrack.BorderSizePixel = 0
	sliderTrack.Parent = inner
	Instance.new("UICorner", sliderTrack).CornerRadius = UDim.new(0, 6)

	local sliderFill = Instance.new("Frame")
	sliderFill.BackgroundColor3 = Color3.fromRGB(56, 122, 255)
	sliderFill.Size = UDim2.new(0.4, 0, 1, 0)
	sliderFill.BorderSizePixel = 0
	sliderFill.Parent = sliderTrack
	Instance.new("UICorner", sliderFill).CornerRadius = UDim.new(0, 6)

	local sliderDrag = Instance.new("Frame")
	sliderDrag.Size = UDim2.new(0, 10, 0, 16)
	sliderDrag.Position = UDim2.new(0.4, -5, 0.5, -8)
	sliderDrag.BackgroundColor3 = Color3.fromRGB(230, 230, 240)
	sliderDrag.Parent = sliderTrack
	Instance.new("UICorner", sliderDrag).CornerRadius = UDim.new(0, 6)

	local dragging = false
	sliderDrag.InputBegan:Connect(function(input)
		if input.UserInputType == Enum.UserInputType.MouseButton1 then dragging = true end
	end)
	UserInputService.InputEnded:Connect(function(input)
		if input.UserInputType == Enum.UserInputType.MouseButton1 then dragging = false end
	end)
	UserInputService.InputChanged:Connect(function(input)
		if dragging and input.UserInputType == Enum.UserInputType.MouseMovement then
			local rel = math.clamp((input.Position.X - sliderTrack.AbsolutePosition.X) / sliderTrack.AbsoluteSize.X, 0, 1)
			sliderFill.Size = UDim2.new(rel, 0, 1, 0)
			sliderDrag.Position = UDim2.new(rel, -5, 0.5, -8)
			blur.Size = math.floor(4 + rel * 22) -- 4..26
		end
	end)
end

-- Tab switching ---------------------------------------------------------------
appsBtn.MouseButton1Click:Connect(function() showPage("Apps") end)
jobsBtn.MouseButton1Click:Connect(function() showPage("Jobs") end)
optionsBtn.MouseButton1Click:Connect(function() showPage("Options") end)
showPage("Apps")

-- Close behavior --------------------------------------------------------------
closeBtn.MouseButton1Click:Connect(function()
	screenGui:Destroy()
end)
screenGui.AncestryChanged:Connect(function(_, parent)
	if parent == nil then
		if blur and blur.Parent then blur:Destroy() end
	end
end)

-- Keybind: RightShift to toggle visibility -----------------------------------
do
	local visible = true
	UserInputService.InputBegan:Connect(function(input, gpe)
		if gpe then return end
		if input.KeyCode == Enum.KeyCode.RightShift then
			visible = not visible
			screenGui.Enabled = visible
		end
	end)
end
